<%
require 'yaml'

# compute inputs
base = p('loghost_exporter.base')
scopes = {
  "local"  => [],
  "remote" => [],
  "global" => [],
}

p('loghost_exporter.deployments').each do |deployment|
  p('loghost_exporter.local-directors').each do |director|
    scopes["local"] << File.join(base, director, deployment, "*.log")
    scopes["global"] << File.join(base, director, deployment, "*.log")
  end
  p('loghost_exporter.remote-directors').each do |director|
    scopes["remote"] << File.join(base, director, deployment, "*.log")
    scopes["global"] << File.join(base, director, deployment, "*.log")
  end
end


# compute imports
imports = [{
  "type" => "grok_patterns",
  "dir" => "/var/vcap/packages/grok_exporter/patterns"
}]
if_p('loghost_exporter.imports') do |items|
  imports.concat(items)
end

# compute server settings
server = {
  "protocol" => p('loghost_exporter.server.protocol'),
  "path"     => p('loghost_exporter.server.path'),
  "port"     => p('loghost_exporter.server.port'),
}

[ "host", "cert", "key" ].each do |key|
  if_p('loghost_exporter.server.#{key}') do |val|
    server[key] = val
  end
end

# output config
config = {
  "global"  => { "config_version" => 3  },
  "imports" => imports,
  "metrics" => [],
  "input"   => {
    "type"                    => "file",
    "fail_on_missing_logfile" => false,
    "paths"                   => scopes["global"]
  },
  "server" => server
}

p('loghost_exporter.metrics').each do |metric|
  scope = metric.fetch("scope", "local")
  metric["paths"] = scopes[scope]
  metric.delete("scope")
  config["metrics"].push(metric)
end

%>
<%= config.to_yaml %>
